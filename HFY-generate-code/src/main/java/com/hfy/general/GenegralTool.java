package com.hfy.general;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileReader;import java.io.FileWriter;import java.lang.reflect.Field;import java.sql.Connection;import java.sql.DatabaseMetaData;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.regex.Matcher;import java.util.regex.Pattern;import org.slf4j.Logger;import org.slf4j.LoggerFactory;/** * 自动生成代码****************************************************************************** * 本程序为深圳浩丰源有限公司开发研制。未经本公司正式书面同意，其他任何个人和团体均不得做任何用途 * 复制、修改或发布本软件. * Copyright (C) 2016 ShenZhen HFY Co.,Ltd * All Rights Reserved. ***************************************************************************** * @author yanning * @date 2016年11月5日 下午7:54:06 * @version 1.0  * */public class GenegralTool {	private static Logger logger = LoggerFactory.getLogger(GenegralTool.class);		public static String OUT_JAVA_PATH = "d:/generalCode";//文件生成路径		//mysql链接	public static final String driver = "com.mysql.jdbc.Driver";	public static final String url = "jdbc:mysql://localhost:3306/zrh_zz?useUnicode=true&amp;characterEncoding=utf-8&amp;autoReconnect=true&amp;failOverReadOnly=false";	public static final String username = "root";	public static final String password = "root";		//oracle链接//	public static final String driver = "oracle.jdbc.driver.OracleDriver";//	public static final String url = "jdbc:oracle:thin:@10.100.6.108:1522:owd01";//	public static final String username = "ECP_CGN_DEV";//	public static final String password = "ECP_CGN_DEV";		public static final String jsPath = "zrh/zz/major/";//js路径	public static final String nameCN = "专业";//中文对象名	public static final String tableName = "zrh_major";//数据库表名	public static final String name = "major";//类名	public static final String packageName  = "com.zrh.zz.major";//包名	public static final String jsI18nName = "majorI18n";			public static final String pkId = "id";//数据库表主键id	//以下4个列必须字段 ，一般以前的表里面都会有，或者换一个名字CREATE_DATE 之类  请一一对应好，如果没有此些字段  生成代码的时候会自动往表里面添加这些字段	public static final String createBy = "CREATE_BY";//对应数据库表字段创建人	public static final String createDate = "CREATE_DATE";//对应数据库表字段创建时间	public static final String updateBy = "UPDATE_BY";//对应数据库表字段修改人	public static final String updateDate = "UPDATE_DATE";//对应数据库表字段修改时间	public static final boolean addColumnAble = false;//是否自动在数据库表中加入没有的字段		/**	 * 空格	 */	public static final String space = " ";	/**	 * entity中不生成的字段	 */	public static final String filterProperty = ";id;createBy;createDate;updateBy;updateDate;isDelete;";	/**	 * Mapper中不生成字段	 */	public static final String filterMapper = ";ID;CREATOR;CREATE_TIME;DELETED_BY;DELETED_DATE;IS_DELETED;IS_MODIFIED;IS_SELECTED;MODIFIER;MODIFY_TIME;VERSION;";	/**	 * 表中增加字段	 */	public static final String alterColumn = " VERSION  number default 1 ,DELETED_BY  VARCHAR2(50),DELETED_DATE  TIMESTAMP(6) ,IS_DELETED  VARCHAR2(1) default '0' ";	/**	 * @param args	 */	public static void main(String[] args) {		Connection conn = null;        // MySQL的JDBC URL编写方式：jdbc:mysql://主机名称：连接端口/数据库的名称?参数=值        // 避免中文乱码要指定useUnicode和characterEncoding        // 执行数据库操作之前要在数据库管理系统上创建一个数据库，名字自己定，        // 下面语句之前就要先创建javademo数据库                try {            // 之所以要使用下面这条语句，是因为要使用MySQL的驱动，所以我们要把它驱动起来，            // 可以通过Class.forName把它加载进去，也可以通过初始化来驱动起来，下面三种形式都可以            Class.forName(driver);// 动态加载mysql驱动             logger.info("成功加载oracle驱动程序");            // 一个Connection代表一个数据库连接            conn = DriverManager.getConnection(url,username,password);            // Statement里面带有很多方法，比如executeUpdate可以实现插入，更新和删除等                                                Map<String,String>  comments = new HashMap<String,String>();            //获取列注释            Statement colmunment = conn.createStatement();            //oracle           /* ResultSet result = colmunment.executeQuery("select * from user_col_comments where table_name = '"+tableName.toUpperCase()+"'");            while(result.next()){            	comments.put(result.getString("COLUMN_NAME"), result.getString("COMMENTS"));            }*/            //mysql            ResultSet result = colmunment.executeQuery("select * from information_schema.`COLUMNS` where table_name = '"+tableName.toUpperCase()+"'");            while(result.next()){            	comments.put(result.getString("COLUMN_NAME"), result.getString("column_comment"));            }            //获取列属性            DatabaseMetaData metaData = conn.getMetaData();            ResultSet rs = metaData.getColumns(conn.getCatalog(), username.toUpperCase(), tableName.toUpperCase(), null);            ClassModel cm  = new ClassModel();            String cname = name.substring(0, 1).toLowerCase()+name.substring(1,name.length());//将类名第一个字母小写            cm.setName(cname);            cm.setPackageName(packageName);            cm.setTableName(tableName);            cm.setPkId(pkId);            cm.setCreateBy(createBy);            cm.setCreateDate(createDate);            cm.setUpdateBy(updateBy);            cm.setUpdateDate(updateDate);            while(rs.next()) {                 	/*System.out.println(rs.getString("COLUMN_NAME"));            	System.out.println(rs.getString("DATA_TYPE"));            	System.out.println(rs.getString("TYPE_NAME"));            	System.out.println(rs.getString("COLUMN_SIZE"));            	System.out.println(rs.getString("NULLABLE"));            	System.out.println(rs.getString("REMARKS"));            	System.out.println(rs.getString("COLUMN_DEF"));            	System.out.println(rs.getString("CHAR_OCTET_LENGTH"));            	System.out.println(rs.getString("ORDINAL_POSITION"));            	System.out.println(rs.getString("IS_NULLABLE"));            	System.out.println(rs.getString("IS_AUTOINCREMENT"));            	System.out.println("=================================");*/              /*if(!(";"+createdBy+";"+pkId+";"+createdDate+";"+modifiedBy+";"+modifiedDate+";").contains(";"+rs.getString("COLUMN_NAME").toUpperCase()+";")){            	  Column column = new Column();            	  column.setColumnSize(Integer.parseInt(rs.getString("DECIMAL_DIGITS")!=null?rs.getString("DECIMAL_DIGITS"):"0"));            	  column.setDecimalNum(Integer.parseInt(rs.getString("COLUMN_SIZE")));                  column.setColumnName(rs.getString("COLUMN_NAME"));                  column.setColumnType(rs.getString("TYPE_NAME"));                  //column.setRemarks(rs.getString("REMARKS"));                  column.setRemarks(comments.get(rs.getString("COLUMN_NAME")));                  column.setDefaultValue(rs.getString("COLUMN_DEF"));                  cm.addColumn(column);              }*/                            if(!pkId.toUpperCase().equals(rs.getString("COLUMN_NAME").toUpperCase())){            	  Column column = new Column();            	  column.setColumnSize(Integer.parseInt(rs.getString("DECIMAL_DIGITS")!=null?rs.getString("DECIMAL_DIGITS"):"0"));            	  column.setDecimalNum(Integer.parseInt(rs.getString("COLUMN_SIZE")));                  column.setColumnName(rs.getString("COLUMN_NAME"));                  column.setColumnType(rs.getString("TYPE_NAME"));                  column.setRemarks(comments.get(rs.getString("COLUMN_NAME")));                  column.setDefaultValue(rs.getString("COLUMN_DEF"));                  cm.addColumn(column);              }                                        }                        /*Statement state = conn.createStatement();            ResultSet rs = state.executeQuery(sql);            ResultSetMetaData rsmd = rs.getMetaData() ;            ClassModel cm  = new ClassModel();            cm.setName(name);            cm.setPackageName(packageName);            cm.setTableName(tableName);            for(int i = 1; i <= rsmd.getColumnCount(); i++)            {	              Column column = new Column();	              column.setColumnName(rsmd.getColumnName(i));	              column.setColumnType(rsmd.getColumnTypeName(i));	              column.setColumnClassName(rsmd.getColumnClassName(i));	              cm.addColumn(column);            }*/            /*if(addColumnAble){	            //新增基本列	            Statement statement = conn.createStatement();	            if(pkId.equals("ID")){	            	try{	            		statement.executeUpdate("alter table "+cm.getTableName()+" add (ID VARCHAR2(50)) ");	            	}catch(SQLException e){	            		logger.warn(cm.getTableName()+"已经存在'ID'列\n"+e.getMessage());	            	}	    		}            }*/                       getClassModel(cm);            getMapperXML(cm);            getMapperModel(cm);            getServiceModel(cm);            getServiceImplModel(cm);            getControllerModel(cm);            getJs(cm);            getSaveJsp(cm);            getViewJsp(cm);            getListJsp(cm);            getI18n(cm);        } catch (SQLException e) {            e.printStackTrace();        } catch (Exception e) {            e.printStackTrace();        } finally {            try {            	logger.info("done");				conn.close();			} catch (SQLException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}        }     }	private static void getViewJsp(ClassModel cm) {		StringBuffer sb = new StringBuffer();		File f = new File(GenegralTool.class.getResource("").getPath()+"JspViewTemplate");		try {			FileReader fr  = new FileReader(f);			BufferedReader br = new BufferedReader(fr);			String s;			while ((s = br.readLine()) != null) {				 sb.append(s+"\r");			}			br.close();			fr.close();						String jsString = sb.toString();			jsString = jsString.replace("${nameCN}", nameCN).replace("${name}", cm.getName()).replace("${className}", cm.getClassName());						StringBuffer saveColumns = new StringBuffer();			for (int i = 0; i < cm.getList().size(); i++) {				Column cl = cm.getList().get(i);				if(!pkId.toUpperCase().equals(cl.getColumnName().toUpperCase())){					String common = "";					if("is_delete".toUpperCase().equals(cl.getColumnName().toUpperCase()) || createDate.toUpperCase().equals(cl.getColumnName().toUpperCase()) || createBy.toUpperCase().equals(cl.getColumnName().toUpperCase()) || updateDate.toUpperCase().equals(cl.getColumnName().toUpperCase()) || updateBy.toUpperCase().equals(cl.getColumnName().toUpperCase())){						common = "common-";					}else{						common = "";					}					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"<div class=\"form-group\">");					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"    <label class=\"col-xs-2 control-label\" id=\"label-"+common+cl.getName()+"\"></label>");					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"    <div class=\"col-xs-4\">");					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"         <p id=\""+cl.getName()+"\" class=\"form-control-static\"></p>");					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"     </div>");					i++;					if (cm.getList().size()==i) {						saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"</div>");						saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"<div class=\"hr-line-dashed\"></div>");						break;					}										cl = cm.getList().get(i);					if("is_delete".toUpperCase().equals(cl.getColumnName().toUpperCase()) || createDate.toUpperCase().equals(cl.getColumnName().toUpperCase()) || createBy.toUpperCase().equals(cl.getColumnName().toUpperCase()) || updateDate.toUpperCase().equals(cl.getColumnName().toUpperCase()) || updateBy.toUpperCase().equals(cl.getColumnName().toUpperCase())){						common = "common-"; 					}else{						common = "";					}					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"     <label class=\"col-xs-2 control-label\" id=\"label-"+common+cl.getName()+"\"></label>");					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"     <div class=\"col-xs-4\">");					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"         <p id=\""+cl.getName()+"\" class=\"form-control-static\"></p>");					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"     </div>");					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"</div>");					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"<div class=\"hr-line-dashed\"></div>");				}			}			jsString = jsString.replace("${viewColumns}", saveColumns);						File fgroup  = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"jsp");			if(!fgroup.exists()){				fgroup.mkdirs();			}			File fout = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"jsp"+File.separator+cm.getName()+"_view.jsp");			if(fout.exists()){				fout.delete(); 			}			BufferedWriter writer = new BufferedWriter(new FileWriter(fout, true));		 	writer.write(jsString);		 	writer.close();		 	logger.info("自动生成jsp view完成");		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}	/**	 * 第一个字母大写	 * @author yanning	 * @date 2016年11月5日 下午9:05:45	 * @version 1.0	 * @param str	 * @return	 */	private static  String toUpperFirstLetterCase(String str){		return  str.substring(0,1).toUpperCase()+str.substring(1);	}	/**	 * 生成mapper xml	 * @author yanning	 * @date 2016年10月26日 上午11:48:52	 * @version 1.0	 * @param cm	 */	private static void getMapperXML(ClassModel cm){		StringBuffer sb = new StringBuffer();		File f = new File(GenegralTool.class.getResource("").getPath()+"MapperXmlTemplate");		try {			FileReader fr  = new FileReader(f);			BufferedReader br = new BufferedReader(fr);			String s;			while ((s = br.readLine()) != null) {				 sb.append(s+"\r");			}			br.close();			fr.close();												String xmlString = sb.toString();			//替换掉类属性			Field[] fields = cm.getClass().getDeclaredFields();			for(Field field : fields ){				if(field.getType().getName().equals("java.lang.String"))					xmlString = xmlString.replace("${"+field.getName()+"}",(String)cm.getClass().getMethod("get"+toUpperFirstLetterCase(field.getName()),null).invoke(cm,null));			}						Pattern pattern = Pattern.compile("@([a-zA-Z]+)\\{(.+)\\}@",Pattern.MULTILINE);			Matcher matcher = pattern.matcher(xmlString);			while(matcher.find()){//			    System.out.println(matcher.group(0));//			    System.out.println(matcher.group(1));			    //System.out.println(matcher.group(2));			    StringBuffer params  = new StringBuffer();			    List<String> matList = new ArrayList<String>();				Pattern paramreg = Pattern.compile("@\\{([^\\}]+)\\}");				Matcher parammat = paramreg.matcher(matcher.group(2));				while(parammat.find()){					/*System.out.println(parammat.group(0));					System.out.println(parammat.group(1));*/					for(int i=0;i<cm.getList().size();i++){						Column cl  = cm.getList().get(i);						if(matList.size()<cm.getList().size()){							matList.add(matcher.group(2).replace(parammat.group(0), (String)cl.getClass().getMethod("get"+toUpperFirstLetterCase(parammat.group(1)),null).invoke(cl,null)));						}else{							matList.set(i, matList.get(i).replace(parammat.group(0), (String)cl.getClass().getMethod("get"+toUpperFirstLetterCase(parammat.group(1)),null).invoke(cl,null)));						}					}				}				boolean flag = matcher.group(2).contains("<");				for(String str : matList){					params.append(str+(flag?"\r":""));				}				String paramsresult = params.toString();				if(!flag&&!"".equals(paramsresult))					paramsresult = paramsresult.substring(0, paramsresult.length()-1);			    xmlString   =  xmlString.replace(matcher.group(0),paramsresult);			    matcher = pattern.matcher(xmlString);			}						xmlString = xmlString.replace("<if test=\"createDate != null \">create_date=#{createDate},</if>", "").replace("<if test=\"item.createDate != null \">create_date=#{item.createDate},</if>", "");			xmlString = xmlString.replace("<if test=\"createBy != null \">create_by=#{createBy},</if>", "").replace("<if test=\"item.createBy != null \">create_by=#{item.createBy},</if>", "");			xmlString = xmlString.replace("<if test=\"updateDate != null \">update_date=#{updateDate},</if>", "update_date=NOW(),").replace("<if test=\"item.updateDate != null \">update_date=#{item.updateDate},</if>", "update_date=NOW(),");			xmlString = xmlString.replace("<if test=\"updateBy != null \">update_by=#{updateBy},</if>", "update_by=#{updateBy},").replace("<if test=\"item.updateBy != null \">update_by=#{item.updateBy},</if>", "update_by=#{item.updateBy},");						//mysql			xmlString = xmlString.replace("#{createDate,jdbcType=DATE}", "NOW()").replace("#{createDate}", "NOW()");			xmlString = xmlString.replace("#{updateDate,jdbcType=DATE}", "NOW()").replace("#{updateDate}", "NOW()");			xmlString = xmlString.replace("#{item.createDate,jdbcType=DATE}", "NOW()").replace("#{item.createDate}", "NOW()");			xmlString = xmlString.replace("#{item.updateDate,jdbcType=DATE}", "NOW()").replace("#{item.updateDate}", "NOW()");						xmlString = xmlString.replace("#{createDate,jdbcType=VARCHAR}", "NOW()").replace("#{createDate}", "NOW()");			xmlString = xmlString.replace("#{updateDate,jdbcType=VARCHAR}", "NOW()").replace("#{updateDate}", "NOW()");			xmlString = xmlString.replace("#{item.createDate,jdbcType=VARCHAR}", "NOW()").replace("#{item.createDate}", "NOW()");			xmlString = xmlString.replace("#{item.updateDate,jdbcType=VARCHAR}", "NOW()").replace("#{item.updateDate}", "NOW()");						//oracle//			xmlString = xmlString.replace("#{createDate,jdbcType=DATE}", "sysdate").replace("#{createDate}", "sysdate");//			xmlString = xmlString.replace("#{updateDate,jdbcType=DATE}", "sysdate").replace("#{updateDate}", "sysdate");//			xmlString = xmlString.replace("#{item.createDate,jdbcType=DATE}", "sysdate").replace("#{item.createDate}", "sysdate");//			xmlString = xmlString.replace("#{item.updateDate,jdbcType=DATE}", "sysdate").replace("#{item.updateDate}", "sysdate");						xmlString = xmlString.replace("<if test=\"isDelete != null \">is_delete=#{isDelete},</if>", "").replace("<if test=\"item.isDelete != null \">is_delete=#{item.isDelete},</if>", "");						//System.out.println(xmlString);			File fgroup  = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"mapper");			if(!fgroup.exists()){				fgroup.mkdirs();			}			File fout = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"mapper"+File.separator+cm.getClassName()+"Mapper.xml");			if(fout.exists()){				fout.delete(); 			}			BufferedWriter writer = new BufferedWriter(new FileWriter(fout, true));		 	writer.write(xmlString);		 	writer.close();		 	logger.info("自动生成Mapper.xml完成");		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}			}	/**	 * 生成Mapper	 * @author yanning	 * @date 2016年10月27日 上午9:29:39	 * @version 1.0	 * @param cm	 */	private static void getMapperModel(ClassModel cm){		StringBuffer sb = new StringBuffer();		File f = new File(GenegralTool.class.getResource("").getPath()+"MapperClassTemplate");		try {			FileReader fr  = new FileReader(f);			BufferedReader br = new BufferedReader(fr);			String s;			while ((s = br.readLine()) != null) {				 sb.append(s+"\r");			}			br.close();			fr.close();			String classString = sb.toString();			classString = classString.replace("${packageName}", cm.getPackageName()).replace("${className}", cm.getClassName());						File fgroup  = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"mapper");			if(!fgroup.exists()){				fgroup.mkdirs();			}			File fout = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"mapper"+File.separator+cm.getClassName()+"Mapper.java");			if(fout.exists()){				fout.delete(); 			}			BufferedWriter writer = new BufferedWriter(new FileWriter(fout, true));		 	writer.write(classString);		 	writer.close();		 	logger.info("自动生成Mapper.java完成");		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}	/**	 * 生成Service	 * @author yanning	 * @date 2016年10月27日 上午9:30:27	 * @version 1.0	 * @param cm	 */	private static void getServiceModel(ClassModel cm){		StringBuffer sb = new StringBuffer();		File f = new File(GenegralTool.class.getResource("").getPath()+"ServiceTemplate");		try {			FileReader fr  = new FileReader(f);			BufferedReader br = new BufferedReader(fr);			String s;			while ((s = br.readLine()) != null) {				 sb.append(s+"\r");			}			br.close();			fr.close();			String classString = sb.toString();			Field[] fields = cm.getClass().getDeclaredFields();			for(Field field : fields ){				if(field.getType().getName().equals("java.lang.String"))					classString = classString.replace("${"+field.getName()+"}",(String)cm.getClass().getMethod("get"+toUpperFirstLetterCase(field.getName()),null).invoke(cm,null));			}						File fgroup  = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"service");			if(!fgroup.exists()){				fgroup.mkdirs();			}			File fout = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"service"+File.separator+cm.getClassName()+"Service.java");			if(fout.exists()){				fout.delete(); 			}			BufferedWriter writer = new BufferedWriter(new FileWriter(fout, true));		 	writer.write(classString);		 	writer.close();		 	logger.info("自动生成Service.java完成");		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}	/**	 * 生成ServiceImpl	 * @author yanning	 * @date 2016年10月27日 上午9:30:27	 * @version 1.0	 * @param cm	 */	private static void getServiceImplModel(ClassModel cm){		StringBuffer sb = new StringBuffer();		File f = new File(GenegralTool.class.getResource("").getPath()+"ServiceImplTemplate");		try {			FileReader fr  = new FileReader(f);			BufferedReader br = new BufferedReader(fr);			String s;			while ((s = br.readLine()) != null) {				 sb.append(s+"\r");			}			br.close();			fr.close();			String classString = sb.toString();			Field[] fields = cm.getClass().getDeclaredFields();			for(Field field : fields ){				if(field.getType().getName().equals("java.lang.String"))					classString = classString.replace("${"+field.getName()+"}",(String)cm.getClass().getMethod("get"+toUpperFirstLetterCase(field.getName()),null).invoke(cm,null));			}						File fgroup  = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"service"+File.separator+"impl");			if(!fgroup.exists()){				fgroup.mkdirs();			}			File fout = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"service"+File.separator+"impl"+File.separator+cm.getClassName()+"ServiceImpl.java");			if(fout.exists()){				fout.delete(); 			}			BufferedWriter writer = new BufferedWriter(new FileWriter(fout, true));		 	writer.write(classString);		 	writer.close();		 	logger.info("自动生成ServiceImpl.java完成");		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}	/**	 * 生成controller	 * @author yanning	 * @date 2016年10月27日 上午9:30:06	 * @version 1.0	 * @param cm	 */	private static void getControllerModel(ClassModel cm){		StringBuffer sb = new StringBuffer();		File f = new File(GenegralTool.class.getResource("").getPath()+"ControllerTemplate");		try {			FileReader fr  = new FileReader(f);			BufferedReader br = new BufferedReader(fr);			String s;			while ((s = br.readLine()) != null) {				 sb.append(s+"\r");			}			br.close();			fr.close();			String classString = sb.toString();			Field[] fields = cm.getClass().getDeclaredFields();			for(Field field : fields ){				if(field.getType().getName().equals("java.lang.String"))					classString = classString.replace("${"+field.getName()+"}",(String)cm.getClass().getMethod("get"+toUpperFirstLetterCase(field.getName()),null).invoke(cm,null));			}						File fgroup  = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"controller");			if(!fgroup.exists()){				fgroup.mkdirs();			}			File fout = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"controller"+File.separator+cm.getClassName()+"Controller.java");			if(fout.exists()){				fout.delete(); 			}			BufferedWriter writer = new BufferedWriter(new FileWriter(fout, true));		 	writer.write(classString);		 	writer.close();		 	logger.info("自动生成Controller.java完成");		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}	/**	 * 创建javabean	 * @author yanning	 * @date 2016年10月27日 上午9:28:39	 * @version 1.0	 * @param cm	 */	private static void getClassModel(ClassModel cm){		StringBuffer sb = new StringBuffer();		File f = new File(GenegralTool.class.getResource("").getPath()+"EntityTemplate");		try {			FileReader fr  = new FileReader(f);			BufferedReader br = new BufferedReader(fr);			String s;			while ((s = br.readLine()) != null) {				 sb.append(s+"\r");			}			br.close();			fr.close();			StringBuffer function= new StringBuffer();			for(Column cl : cm.getList()){				if (addColumnAble) {									}				if(!filterProperty.contains(";"+cl.getName()+";")&&!pkId.toUpperCase().equals(cl.getColumnName().toUpperCase())){//					function.append( (cl.getRemarks()!=null?("    /**"+cl.getRemarks()+"*/\r"):"") +space+"private "+ cl.getType() +" "+cl.getName()+(cl.getDefaultValue()!=null?(" = "+cl.getDefaultValueToString()):"")+";\r"					function.append( (cl.getRemarks()!=null?("    /**"+cl.getRemarks()+"*/\r"):"") +space+"private "+ cl.getType() +" "+cl.getName()+";\r"					+ space+"public void set"+cl.getFunName()+"("+cl.getType()+" "+cl.getName()+"){\r"					+ space+space+"this."+cl.getName()+" = "+cl.getName()+";\r"					+ space+"}\r"					+ space+"public "+cl.getType()+" get"+cl.getFunName()+"(){\r"					+ space+space+"return this."+cl.getName()+";\r"					+ space+"}\n\r");				}							}			String classString = sb.toString();			classString  =  classString.replace("${packageName}", cm.getPackageName());			classString  =  classString.replace("${tableName}", cm.getTableName());			classString  =  classString.replace("${className}", cm.getClassName());			classString  =  classString.replace("${function}", function.toString());						File fgroup  = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"entity");			if(!fgroup.exists()){				fgroup.mkdirs();			}			File fout = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"entity"+File.separator+cm.getClassName()+".java");			if(fout.exists()){				fout.delete(); 			}			BufferedWriter writer = new BufferedWriter(new FileWriter(fout, true));		 	writer.write(classString);		 	writer.close();		 	logger.info("自动生成Entity.java完成");		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}			}	/**	 * 自动生成js	 * @author yanning	 * @date 2016年11月5日 下午9:04:24	 * @version 1.0	 * @param cm	 */	private static void getJs(ClassModel cm){		StringBuffer sb = new StringBuffer();		File f = new File(GenegralTool.class.getResource("").getPath()+"JsTemplate");		try {			FileReader fr  = new FileReader(f);			BufferedReader br = new BufferedReader(fr);			String s;			while ((s = br.readLine()) != null) {				 sb.append(s+"\r");			}			br.close();			fr.close();			String jsString = sb.toString();			jsString = jsString.replace("${nameCN}", nameCN).replace("${name}", cm.getName()).replace("${className}", cm.getClassName());						StringBuffer jsTableColumns = new StringBuffer();//初始table字段列表			StringBuffer i18nColumns = new StringBuffer();//初始化查询国际化			StringBuffer i18nColumnsChild = new StringBuffer();//初始化子页面国际化			jsTableColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+"{");			jsTableColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+" title: '', ");			jsTableColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+" field:'select', ");			jsTableColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+" align: 'center', ");			jsTableColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+" valign: 'middle', ");			jsTableColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+" checkbox: 'true' ");			jsTableColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+"},");			int i = 0;			for(Column cl : cm.getList()){				if(!pkId.toUpperCase().equals(cl.getColumnName().toUpperCase())){					if (!createDate.toUpperCase().equals(cl.getColumnName().toUpperCase()) && !createBy.toUpperCase().equals(cl.getColumnName().toUpperCase()) && !"is_delete".toUpperCase().equals(cl.getColumnName().toUpperCase())) {						jsTableColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+"{");						if (updateDate.toUpperCase().equals(cl.getColumnName().toUpperCase()) || updateBy.toUpperCase().equals(cl.getColumnName().toUpperCase())) {							jsTableColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+" title: parent.common."+cl.getName()+", ");						}else{							jsTableColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+" title: "+jsI18nName+"."+cm.getName()+"_"+cl.getName()+", ");						}						jsTableColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+" sortable:true, ");						jsTableColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+" field:'"+cl.getName()+"', ");						jsTableColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+" align: 'center', ");						jsTableColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+" valign: 'middle' ");						jsTableColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+space+"},");					}										if (!createDate.toUpperCase().equals(cl.getColumnName().toUpperCase()) && !createBy.toUpperCase().equals(cl.getColumnName().toUpperCase()) && !updateDate.toUpperCase().equals(cl.getColumnName().toUpperCase()) && !updateBy.toUpperCase().equals(cl.getColumnName().toUpperCase())) {						i18nColumnsChild.append("\r "+space+space+space+space+space+"form.find('#label-"+cl.getName()+"').html("+jsI18nName+"."+cm.getName()+"_"+cl.getName()+");");						if(i < 2){							i18nColumns.append("\r "+space+space+space+space+space+"$('#label-"+cl.getName()+"').html("+jsI18nName+"."+cm.getName()+"_"+cl.getName()+");");							i++;						}					}else{						i18nColumnsChild.append("\r "+space+space+space+space+space+"form.find('#label-common-"+cl.getName()+"').html("+"parent.common."+cl.getName()+");");					}				}							}			jsString = jsString.replace("${jsTableColumns}", jsTableColumns.substring(0, jsTableColumns.length()-1));						jsString = jsString.replace("${initI18nChild}", i18nColumnsChild);			jsString = jsString.replace("${initI18n}", i18nColumns);			jsString = jsString.replace("${jsPath}", jsPath).replace("${jsI18nName}", jsI18nName);						File fgroup  = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"js");			if(!fgroup.exists()){				fgroup.mkdirs();			}			File fout = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"js"+File.separator+cm.getName()+".js");			if(fout.exists()){				fout.delete(); 			}			BufferedWriter writer = new BufferedWriter(new FileWriter(fout, true));		 	writer.write(jsString);		 	writer.close();		 	logger.info("自动生成js完成");		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}	/**	 * 自动生成新增和修改jsp页面	 * @author yanning	 * @date 2016年11月6日 下午2:54:11	 * @version 1.0	 * @param cm	 */	private static void getSaveJsp(ClassModel cm){		StringBuffer sb = new StringBuffer();		File f = new File(GenegralTool.class.getResource("").getPath()+"JspSaveTemplate");		try {			FileReader fr  = new FileReader(f);			BufferedReader br = new BufferedReader(fr);			String s;			while ((s = br.readLine()) != null) {				 sb.append(s+"\r");			}			br.close();			fr.close();						String jsString = sb.toString();			jsString = jsString.replace("${nameCN}", nameCN).replace("${name}", cm.getName()).replace("${className}", cm.getClassName());						StringBuffer saveColumns = new StringBuffer();			saveColumns.append(space+"<input type=\"hidden\" name=\""+pkId+"\" />");			for (int i = 0; i < cm.getList().size(); i++) {				Column cl = cm.getList().get(i);				if(!pkId.toUpperCase().equals(cl.getColumnName().toUpperCase())){					if (createDate.toUpperCase().equals(cl.getColumnName().toUpperCase()) || createBy.toUpperCase().equals(cl.getColumnName().toUpperCase()) || updateDate.toUpperCase().equals(cl.getColumnName().toUpperCase()) || updateBy.toUpperCase().equals(cl.getColumnName().toUpperCase()) || "is_delete".toUpperCase().equals(cl.getColumnName().toUpperCase())) {						continue;					}					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"<div class=\"form-group\">");					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"    <label class=\"col-xs-2 control-label\" id=\"label-"+cl.getName()+"\"></label>");					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"    <div class=\"col-xs-4\">");					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"         <input id=\""+cl.getName()+"\" name=\""+cl.getName()+"\" class=\"form-control\" type=\"text\">");					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"     </div>");					i++;					if (cm.getList().size()==i) {						saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"</div>");						saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"<div class=\"hr-line-dashed\"></div>");						break;					}					cl = cm.getList().get(i);					if (createDate.toUpperCase().equals(cl.getColumnName().toUpperCase()) || createBy.toUpperCase().equals(cl.getColumnName().toUpperCase()) || updateDate.toUpperCase().equals(cl.getColumnName().toUpperCase()) || updateBy.toUpperCase().equals(cl.getColumnName().toUpperCase()) || "is_delete".toUpperCase().equals(cl.getColumnName().toUpperCase())) {						continue;					}					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"     <label class=\"col-xs-2 control-label\" id=\"label-"+cl.getName()+"\"></label>");					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"     <div class=\"col-xs-4\">");					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"         <input id=\""+cl.getName()+"\" name=\""+cl.getName()+"\" class=\"form-control\" type=\"text\">");					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"     </div>");					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"</div>");					saveColumns.append("\r "+space+space+space+space+space+space+space+space+space+space+"<div class=\"hr-line-dashed\"></div>");				}			}			jsString = jsString.replace("${saveColumns}", saveColumns);						File fgroup  = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"jsp");			if(!fgroup.exists()){				fgroup.mkdirs();			}			File fout = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"jsp"+File.separator+cm.getName()+"_save.jsp");			if(fout.exists()){				fout.delete(); 			}			BufferedWriter writer = new BufferedWriter(new FileWriter(fout, true));		 	writer.write(jsString);		 	writer.close();		 	logger.info("自动生成jsp add完成");		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}	/**	 * 自动生成列表jsp页面	 * @author yanning	 * @date 2016年11月6日 下午2:54:27	 * @version 1.0	 * @param cm	 */	private static void getListJsp(ClassModel cm){		StringBuffer sb = new StringBuffer();		File f = new File(GenegralTool.class.getResource("").getPath()+"JspListTemplate");		try {			FileReader fr  = new FileReader(f);			BufferedReader br = new BufferedReader(fr);			String s;			while ((s = br.readLine()) != null) {				 sb.append(s+"\r");			}			br.close();			fr.close();			String jsString = sb.toString();			jsString = jsString.replace("${nameCN}", nameCN).replace("${name}", cm.getName()).replace("${className}", cm.getClassName());			jsString = jsString.replace("${jsPath}", jsPath);						StringBuffer searchColumns = new StringBuffer();			for (int i = 0; i < cm.getList().size(); i++) {				Column cl = cm.getList().get(i);				if(!pkId.toUpperCase().equals(cl.getColumnName().toUpperCase())){					searchColumns.append("\r "+space+space+space+space+space+"<div class=\"form-group\" style=\"margin-top:15px\">");					searchColumns.append("\r "+space+space+space+space+space+"    <label class=\"col-sm-2 control-label\" id=\"label-"+cl.getName()+"\"></label>");					searchColumns.append("\r "+space+space+space+space+space+"    <div class=\"col-sm-4\">");					searchColumns.append("\r "+space+space+space+space+space+"         <input id=\""+cl.getName()+"\" name=\""+cl.getName()+"\" class=\"form-control\" type=\"text\">");					searchColumns.append("\r "+space+space+space+space+space+"     </div>");					i++;					cl = cm.getList().get(i);					searchColumns.append("\r "+space+space+space+space+space+"     <label class=\"col-sm-2 control-label\" id=\"label-"+cl.getName()+"\"></label>");					searchColumns.append("\r "+space+space+space+space+space+"     <div class=\"col-sm-4\">");					searchColumns.append("\r "+space+space+space+space+space+"         <input id=\""+cl.getName()+"\" name=\""+cl.getName()+"\" class=\"form-control\" type=\"text\">");					searchColumns.append("\r "+space+space+space+space+space+"     </div>");					searchColumns.append("\r "+space+space+space+space+space+"</div>");										searchColumns.append("\r "+space+space+space+space+space+"<div id=\"collapseOne\" style=\"display:none;\">");					searchColumns.append("\r "+space+space+space+space+space+"</div>");										searchColumns.append("\r "+space+space+space+space+space+"<div class=\"form-group\">");					searchColumns.append("\r "+space+space+space+space+space+"     <div class=\"col-sm-12 col-sm-offset-5\">");					searchColumns.append("\r "+space+space+space+space+space+"         <button onclick=\""+cm.getName()+".query"+cm.getClassName()+"()\" class=\"btn btn-primary\" type=\"button\" id=\"button-search\"></button>");					searchColumns.append("\r "+space+space+space+space+space+"			<a class=\"btn btn-primary\" data-toggle=\"collapse\" onclick=\"utils.collapse('collapseOne',this)\">");					searchColumns.append("\r "+space+space+space+space+space+"			<i class=\"fa fa-chevron-up\"></i>");					searchColumns.append("\r "+space+space+space+space+space+"			</a>");					searchColumns.append("\r "+space+space+space+space+space+"     </div>");					searchColumns.append("\r "+space+space+space+space+space+"</div>");					break;				}			}			jsString = jsString.replace("${searchColumns}", searchColumns);						File fgroup  = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"jsp");			if(!fgroup.exists()){				fgroup.mkdirs();			}			File fout = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"jsp"+File.separator+cm.getName()+"_list.jsp");			if(fout.exists()){				fout.delete(); 			}			BufferedWriter writer = new BufferedWriter(new FileWriter(fout, true));		 	writer.write(jsString);		 	writer.close();		 	logger.info("自动生成jsp list完成");		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}	/**	 * 自动生成国际化	 * @author yanning	 * @date 2016年11月6日 下午2:54:42	 * @version 1.0	 * @param cm	 */	private static void getI18n(ClassModel cm){		StringBuffer sb = new StringBuffer();		File f = new File(GenegralTool.class.getResource("").getPath()+"I18nTemplate");		try {			FileReader fr  = new FileReader(f);			BufferedReader br = new BufferedReader(fr);			String s;			while ((s = br.readLine()) != null) {				 sb.append(s+"\r");			}			br.close();			fr.close();			String jsString = sb.toString();						jsString = jsString.replace("${nameCN}", nameCN);						StringBuffer columns = new StringBuffer();			for (int i = 0; i < cm.getList().size(); i++) {				Column cl = cm.getList().get(i);				if(!pkId.toUpperCase().equals(cl.getColumnName().toUpperCase())){					if (!createDate.toUpperCase().equals(cl.getColumnName().toUpperCase()) && !createBy.toUpperCase().equals(cl.getColumnName().toUpperCase()) && !updateDate.toUpperCase().equals(cl.getColumnName().toUpperCase()) && !updateBy.toUpperCase().equals(cl.getColumnName().toUpperCase()) && !"is_delete".toUpperCase().equals(cl.getColumnName().toUpperCase())) {						String remarks = cl.getRemarks()==null?"''":"'"+cl.getRemarks()+"'";						columns.append(name+"_"+cl.getName()+":"+remarks+",\r");					}				}			}			jsString = jsString.replace("${columns}", columns.substring(0, columns.length()-1)).replace("${name}", cm.getName()).replace("${className}", cm.getClassName()).replace("${jsI18nName}", jsI18nName);			jsString = jsString.replace("${jsPath}", jsPath);						File fgroup  = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"i18n");			if(!fgroup.exists()){				fgroup.mkdirs();			}			File fout = new File(OUT_JAVA_PATH+File.separator+packageName.replace(".",File.separator)+File.separator+"i18n"+File.separator+cm.getName()+"_zh_CN.js");			if(fout.exists()){				fout.delete(); 			}			BufferedWriter writer = new BufferedWriter(new FileWriter(fout, true));		 	writer.write(jsString);		 	writer.close();		 	logger.info("自动生成国际化js文件完成");		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}}