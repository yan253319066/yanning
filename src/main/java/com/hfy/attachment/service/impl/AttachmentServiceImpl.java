package com.hfy.attachment.service.impl;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.apache.commons.io.FileUtils;import org.apache.shiro.SecurityUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;import org.springframework.web.multipart.MultipartHttpServletRequest;import org.springframework.web.multipart.MultipartResolver;import org.springframework.web.multipart.commons.CommonsMultipartResolver;import com.hfy.base.mapper.BaseMapper;import com.hfy.base.service.impl.BaseServiceImpl;import com.hfy.cache.Cache;import com.hfy.login.entity.Login;import com.hfy.utils.CurrentLogin;import com.hfy.attachment.entity.Attachment;import com.hfy.attachment.mapper.AttachmentMapper;import com.hfy.attachment.service.AttachmentService;/** * 附件service实现****************************************************************************** * 本程序为深圳浩丰源有限公司开发研制。未经本公司正式书面同意，其他任何个人和团体均不得做任何用途 * 复制、修改或发布本软件. * Copyright (C) 2016 ShenZhen HFY Co.,Ltd * All Rights Reserved. ***************************************************************************** * @author yanning * @date 2016年12月5日 上午9:58:57 * @version 1.0  * */@Servicepublic class AttachmentServiceImpl extends BaseServiceImpl implements AttachmentService{	@Autowired	AttachmentMapper attachmentMapper;	@Override	public BaseMapper getMapper() {		// TODO Auto-generated method stub		return this.attachmentMapper;	}	@Override	public boolean upload(HttpServletRequest request) throws IllegalStateException, IOException {		// TODO Auto-generated method stub		boolean b = false;		Login login = CurrentLogin.getCurrentLogin();		String sign = "";		List<Attachment> attaList = new ArrayList<Attachment>();		// 将当前上下文初始化给 CommonsMutipartResolver （多部分解析器）		CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(request.getSession().getServletContext());		// 检查form中是否有enctype="multipart/form-data"		if (multipartResolver.isMultipart(request)) {			// 将request变成多部分request			MultipartResolver resolver = new CommonsMultipartResolver(request.getSession().getServletContext());			MultipartHttpServletRequest multiRequest = resolver.resolveMultipart(request);			sign = multiRequest.getParameter("sign");//标识，标记是哪里的上传			// 获取multiRequest 中所有的文件名			Iterator<String> iter = multiRequest.getFileNames();			while (iter.hasNext()) {				// 一次遍历所有文件				MultipartFile file = multiRequest.getFile(iter.next().toString());				if (file != null) {					//创建新的文件名					String[] arr = file.getOriginalFilename().split("\\.");					String fileName = System.currentTimeMillis()+"."+arr[arr.length-1];					String uploadTmpPath = Cache.getConfigValue("upload.tmp");					String _uploadTmpPath = String.format(uploadTmpPath, request.getSession().getId());					if (login != null) {						_uploadTmpPath = String.format(uploadTmpPath, login.getUsername());					}					File dic = new File(_uploadTmpPath);					if (!dic.exists()) {						dic.mkdirs();					}					String filePath = _uploadTmpPath + fileName;					// 上传					file.transferTo(new File(filePath));					Attachment atta = new Attachment();					atta.setAttaFormat(file.getContentType());					atta.setAttaNewName(fileName);					atta.setAttaOldName(file.getOriginalFilename());					atta.setAttaPath(_uploadTmpPath);					atta.setAttaType(sign);					attaList.add(atta);				}			}		}		//查看是否已经存在，如果存在则是连续上传，则将以前的和现在的合并到一起		@SuppressWarnings("unchecked")		List<Attachment> _attaList = (List<Attachment>) request.getSession().getAttribute(sign+"Upload");		if (_attaList != null) {			attaList.addAll(_attaList);		}		request.getSession().setAttribute(sign+"Upload", attaList);		b = true;		return b;	}		public int save(HttpServletRequest req, String sign, String tableId, String tableName) throws Exception{		int res = -1;		@SuppressWarnings("unchecked")		List<Attachment> attaList = (List<Attachment>) SecurityUtils.getSubject().getSession().getAttribute(sign+"Upload");		Login login = CurrentLogin.getCurrentLogin();		if (login==null) {			login = new Login();			login.setUsername("visitors");		}		String uploadPath = Cache.getConfigValue("upload.path");		String uploadTmpPath = Cache.getConfigValue("upload.tmp");		String _uploadPath = String.format(uploadPath, req.getSession().getId(),tableName,sign);		if (login != null) {			_uploadPath = String.format(uploadPath, login.getUsername(),tableName,sign);		}		String _uploadTmpPath = String.format(uploadTmpPath, req.getSession().getId());		if (login != null) {			_uploadTmpPath = String.format(uploadTmpPath, login.getUsername());		}		if (attaList!=null) {			for (Attachment atta : attaList) {				atta.setTableId(tableId);				atta.setTableName(tableName);				atta.setCreateBy(login.getUsername());				atta.setUpdateBy(login.getUsername());				atta.setAttaPath(_uploadPath);			}						File dir = new File(_uploadPath);			FileUtils.deleteDirectory(dir);//删除原来的文件			FileUtils.moveDirectory(new File(_uploadTmpPath), dir);//将新上传的文件移到指定位置						Map<String, Object> paramMap = new HashMap<String, Object>();			paramMap.put("tableId", tableId);			paramMap.put("tableName", tableName);			paramMap.put("attaType", sign);			attachmentMapper.deleteByParam(paramMap);			res = attachmentMapper.insertBatch(attaList);			SecurityUtils.getSubject().getSession().removeAttribute(sign+"Upload");		}else{			new Exception("session中存放的文件为null");		}		return res;	}	}